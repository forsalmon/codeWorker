<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean id="customAccessDenied" class="kr.or.ddit.security.CustomAccessDeniedHandler"></bean>
	<bean id="customLoginSuccess" class="kr.or.ddit.security.CustomLoginSuccessHandler"></bean>

	<bean id="bcryptPasswordEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	<!-- 인증/인가 처리 시 사용자 정의 테이블 및 컬럼 사용 -->
  	<bean id="customUserDetailsService" 
 		class="kr.or.ddit.security.CustomUserDetailsService"></bean> 

	<security:http>
		<!-- URI 패턴으로 접근 제한을 설정함 -->
		
		<!-- 관리자 -->
 		<security:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" />
 		
 		<!-- 로그인한 회원(ROLE_SEEKER)만 글쓰기 가능하게 -->
 		<security:intercept-url pattern="/communityInsert" access="hasRole('ROLE_SEEKER')" />
 		
		<!-- 로그인 성공 처리자 -->
		<security:form-login login-page="/login"  authentication-success-handler-ref="customLoginSuccess" password-parameter="memPw" username-parameter="memId" />
		
		<!-- 로그아웃 처리를 위해 URI를 지정하고, 로그아웃 후에 세션을 무효화 -->
		<security:logout logout-url="/logout" invalidate-session="true"  delete-cookies="remember-me, JSESSION_ID"/>
				
		<!-- <security:remember-me data-source-ref="dataSource" token-validity-seconds="604800"/> -->

		<security:access-denied-handler ref="customAccessDenied" />
	</security:http>

	<security:authentication-manager>
		<security:authentication-provider user-service-ref="customUserDetailsService">
			<security:password-encoder ref="bcryptPasswordEncoder"/>
		</security:authentication-provider>
	</security:authentication-manager>

</beans>



